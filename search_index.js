var documenterSearchIndex = {"docs":
[{"location":"processing/#Processing","page":"Processing","title":"Processing","text":"","category":"section"},{"location":"processing/","page":"Processing","title":"Processing","text":"Modules = [Processing]","category":"page"},{"location":"processing/#Processing.cleanup_ohlcv_data-Tuple{Any, Any}","page":"Processing","title":"Processing.cleanup_ohlcv_data","text":"Similar to the freqtrade homonymous function.\n\nfill_missing: :close fills non present candles with previous close and 0 volume, else with NaN.\n\n\n\n\n\n","category":"method"},{"location":"processing/#Processing.fill_missing_rows-Tuple{Any, AbstractString}","page":"Processing","title":"Processing.fill_missing_rows","text":"Assuming timestamps are sorted, returns a new dataframe with a contiguous rows based on timeframe. Rows are filled either by previous close, or NaN. \n\n\n\n\n\n","category":"method"},{"location":"processing/#Processing.is_incomplete_candle-Union{Tuple{F}, Tuple{F, F}} where F<:AbstractFloat","page":"Processing","title":"Processing.is_incomplete_candle","text":"Checks if a candle timestamp is too new.\n\n\n\n\n\n","category":"method"},{"location":"processing/#Processing.is_last_complete_candle-Tuple{Any, Any}","page":"Processing","title":"Processing.is_last_complete_candle","text":"Checks if a timestamp belongs to the newest possible candle of given timeframe.\n\n\n\n\n\n","category":"method"},{"location":"processing/#Processing.maptf-Tuple{AbstractVector{T} where T<:String, Any, Function}","page":"Processing","title":"Processing.maptf","text":"Apply a function over data, resampling data to each timeframe in tfs.\n\nf: signature is (data; kwargs...)::DataFrame\ntfsum: sum the scores across multiple timeframes for every pair.\n\n\n\n\n\n","category":"method"},{"location":"processing/#Processing.normalize!-Tuple{Any}","page":"Processing","title":"Processing.normalize!","text":"Applies either a unitrange transform or a zscore tranform over the data in place.\n\n\n\n\n\n","category":"method"},{"location":"processing/#Processing.resample-Tuple{ExchangeTypes.Exchange8, Any, Any, Any, Any}","page":"Processing","title":"Processing.resample","text":"Resamples ohlcv data from a smaller to a higher timeframe.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges","page":"Exchanges","title":"Exchanges","text":"","category":"section"},{"location":"exchanges/#Exchange-Types","page":"Exchanges","title":"Exchange Types","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Basic exchange types, and global exchange vars.","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Modules = [Exchanges.ExchangeTypes]\nPages = [\"ExchangeTypes.jl\"]","category":"page"},{"location":"exchanges/#ExchangeTypes.exc","page":"Exchanges","title":"ExchangeTypes.exc","text":"Global var implicit exchange instance.\n\nWhen working interactively, a global exc variable is available, updated through globalexchange!, which is used as the default for some functions when the exchange argument is omitted.\n\n\n\n\n\n","category":"constant"},{"location":"exchanges/#ExchangeTypes.exchanges","page":"Exchanges","title":"ExchangeTypes.exchanges","text":"Global var holding Exchange instances. Used as a cache.\n\n\n\n\n\n","category":"constant"},{"location":"exchanges/#ExchangeTypes.ExcPrecisionMode","page":"Exchanges","title":"ExchangeTypes.ExcPrecisionMode","text":"Same as ccxt precision mode enums.\n\n\n\n\n\n","category":"type"},{"location":"exchanges/#ExchangeTypes.Exchange","page":"Exchanges","title":"ExchangeTypes.Exchange","text":"The exchange type wraps a ccxt exchange instance. Some attributes frequently accessed are copied over to avoid round tripping python. More attributes might be added in the future. To instantiate an exchange call getexchange! or setexchange!.\n\n\n\n\n\n","category":"type"},{"location":"exchanges/#ExchangeTypes.ExchangeID","page":"Exchanges","title":"ExchangeTypes.ExchangeID","text":"An ExchangeID is a symbol checked to match a ccxt exchange class.\n\n\n\n\n\n","category":"type"},{"location":"exchanges/#Base.getproperty-Tuple{ExchangeTypes.Exchange8, Symbol}","page":"Exchanges","title":"Base.getproperty","text":"Attributes not matching the Exchange struct fields are forwarded to the wrapped ccxt class instance.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Base.hash-Tuple{ExchangeTypes.Exchange8, UInt64}","page":"Exchanges","title":"Base.hash","text":"The hash of an exchange object is reduced to its symbol (the function used to instantiate the object from ccxt).\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#ExchangeTypes.globalexchange!-Tuple{ExchangeTypes.Exchange8}","page":"Exchanges","title":"ExchangeTypes.globalexchange!","text":"Updates the global exchange exc variable.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchange-functions","page":"Exchanges","title":"Exchange functions","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Modules = [Exchanges]\nPages = [\"exchanges.jl\", \"pairlist.jl\", \"-data.jl\"]","category":"page"},{"location":"exchanges/#Exchanges.aprice-Tuple{Any}","page":"Exchanges","title":"Exchanges.aprice","text":"Get price from ticker.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.as_spot_ticker-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges.as_spot_ticker","text":"Trims the settlement currency in futures.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.exckeys!-NTuple{4, Any}","page":"Exchanges","title":"Exchanges.exckeys!","text":"Set exchange api keys.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.get_markets-Tuple{Any}","page":"Exchanges","title":"Exchanges.get_markets","text":"Get the the markets of the ccxt instance, according to min_volume and quote currency.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.getexchange!-Tuple{Symbol, Vararg{Any}}","page":"Exchanges","title":"Exchanges.getexchange!","text":"getexchage!: ccxt exchange by symbol either from cache or anew. \n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.hastickers-Tuple{ExchangeTypes.Exchange8}","page":"Exchanges","title":"Exchanges.hastickers","text":"Check if exchange has tickers list.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.issandbox","page":"Exchanges","title":"Exchanges.issandbox","text":"Check if sandbox mode is enabled for exchange.\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.loadmarkets!-Tuple{Any}","page":"Exchanges","title":"Exchanges.loadmarkets!","text":"Load exchange markets:\n\ncache: rely on storage cache\nagemax: max cache valid period [1 day].\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.price_ranges-Tuple{AbstractString, Vararg{Any}}","page":"Exchanges","title":"Exchanges.price_ranges","text":"Get price ranges using tickers data from exchange.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.qvol-Tuple{AbstractDict}","page":"Exchanges","title":"Exchanges.qvol","text":"Get quote volume of market.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.ratelimit!","page":"Exchanges","title":"Exchanges.ratelimit!","text":"Enable or disable rate limit.\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.sandbox!","page":"Exchanges","title":"Exchanges.sandbox!","text":"Enable sandbox mode for exchange\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.setexchange!-Tuple{ExchangeTypes.Exchange8, Vararg{Any}}","page":"Exchanges","title":"Exchanges.setexchange!","text":"Instantiate an exchange struct. it sets:\n\nThe matching ccxt class.\nPre-emptively loads the markets.\nSets the exchange timeframes.\nSets exchange api keys.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.@exchange!-Tuple{Any}","page":"Exchanges","title":"Exchanges.@exchange!","text":"Define an exchange variable set to its matching exchange instance.\n\n\n\n\n\n","category":"macro"},{"location":"exchanges/#Exchanges.@tickers","page":"Exchanges","title":"Exchanges.@tickers","text":"Fetch and cache tickers data.\n\n\n\n\n\n","category":"macro"},{"location":"exchanges/#Exchanges.get_pairlist-Tuple{ExchangeTypes.Exchange8, String, Float64}","page":"Exchanges","title":"Exchanges.get_pairlist","text":"Get the exchange pairlist.\n\nquot: Only choose pairs where the quot currency equals quot.\nmin_vol: The minimum volume of each pair.\nskip_fiat: Ignore fiat/fiat pairs.\nmargin: Only choose pairs enabled for margin trading.\nleveraged: If :no skip all pairs where the base currency matches the leverage_pair_rgx regex.\nas_vec: Returns the pairlist as a Vector instead of as a Dict.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Exchanges.is_pair_active","page":"Exchanges","title":"Exchanges.is_pair_active","text":"\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.market!","page":"Exchanges","title":"Exchanges.market!","text":"Retrieves a cached market (1minute) or fetches it from exchange.\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.market_fees","page":"Exchanges","title":"Exchanges.market_fees","text":"Taker fees for market.\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.market_limits","page":"Exchanges","title":"Exchanges.market_limits","text":"Minimum order size of the of the market.\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Exchanges.market_precision","page":"Exchanges","title":"Exchanges.market_precision","text":"Precision of the (base, quote) currencies of the market.\n\n\n\n\n\n","category":"function"},{"location":"exchanges/#Data","page":"Exchanges","title":"Data","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Extensions for the top level Data module.","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Modules = [JuBot.Exchanges]\nPages = [\"data.jl\"]","category":"page"},{"location":"exchanges/#Data.load_ohlcv-Tuple{}","page":"Exchanges","title":"Data.load_ohlcv","text":"Load all pairs from exchange according to config quote currency and timeframe.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Data.save_ohlcv-Tuple{Any, Any, Any}","page":"Exchanges","title":"Data.save_ohlcv","text":"Updates pair data of the globally set exchange.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetching","page":"Exchanges","title":"Fetching","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Helper module for downloading data off exchanges.","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Modules = [Fetch]","category":"page"},{"location":"exchanges/#Fetch._fetch_loop-Union{Tuple{F}, Tuple{Function, ExchangeTypes.Exchange8, Any}} where F<:AbstractFloat","page":"Exchanges","title":"Fetch._fetch_loop","text":"Calls the fetc_func iteratively until the full dates range has been downloaded. NOTE: The returned data won't be exactly the number of candles expected by e.g. length(DateRange(from, to))\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch._fetch_ohlcv_1-Tuple{ExchangeTypes.Exchange8, Any, Any}","page":"Exchanges","title":"Fetch._fetch_ohlcv_1","text":"Ensure a to date is set, before fetching.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch._fetch_with_delay-Tuple{Function, Any}","page":"Exchanges","title":"Fetch._fetch_with_delay","text":"Wraps a fetching function around error handling and backoff delay. fetch_func signature: (pair::String, since::Float, limit::Float) -> PyList The converter function has to tabulate the data such that the first column is the timestamp\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch.fetch_funding-Tuple{ExchangeTypes.Exchange8, Vector}","page":"Exchanges","title":"Fetch.fetch_funding","text":"Fetch funding rate history from exchange for a list of Derivative pairs.\n\nfrom, to: specify date period to fetch candles for.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch.fetch_ohlcv-Tuple{ExchangeTypes.Exchange8, AbstractString, AbstractVector}","page":"Exchanges","title":"Fetch.fetch_ohlcv","text":"Fetch ohlcv data from exchange for a list of pairs.\n\nfrom, to: Can represent a date. A negative from number implies fetching the last N=from candles.\nupdate: If true, will check for cached data, and fetch only missing candles. (false)\nprogress: if true, show a progress bar. (true)\nreset: if true, will remove cached data before fetching. (false)\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch.fetch_ohlcv-Tuple{Vector{ExchangeTypes.Exchange8}, Any}","page":"Exchanges","title":"Fetch.fetch_ohlcv","text":"Fetch ohlcv data for multiple exchanges on the same timeframe.\n\nIt accepts:\n\na mapping of exchange instances to pairlists.\na vector of symbols for which an exchange instance will be instantiated for each element,   and pairlist will be composed according to quote currency and min_volume from JuBot.config.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch.find_since-Tuple{ExchangeTypes.Exchange8, Any}","page":"Exchanges","title":"Fetch.find_since","text":"Should return the oldest possible timestamp for a pair, or something close to it.\n\n\n\n\n\n","category":"method"},{"location":"exchanges/#Fetch.funding_data-Tuple{ExchangeTypes.Exchange8, AbstractString, Vararg{Any}}","page":"Exchanges","title":"Fetch.funding_data","text":"Retrieves all funding data return by exchange for symbol, or a subset.\n\nfunding_data(exc, \"BTC/USDT:USDT\")\nfunding_data(exc, \"BTC/USDT:USDT\", :fundingRate, :markPrice)\n\n\n\n\n\n","category":"method"},{"location":"data/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Modules = [JuBot.Data]","category":"page"},{"location":"data/#Data.ZarrInstance","page":"Data","title":"Data.ZarrInstance","text":"Candles data is stored with hierarchy PAIR -> [TIMEFRAMES...]. A pair is a ZGroup, a timeframe is a ZArray.\n\n\n\n\n\n","category":"type"},{"location":"data/#Data._load-Tuple{Any, Any, Any}","page":"Data","title":"Data._load","text":"Load ohlcv pair data from zarr instance. zi: The zarr instance to use key: the name of the array to load from the zarr instance (in the format exchange/timeframe/pair) td: the timeframe (as integer in milliseconds) of the target ohlcv table to be loaded from, to:\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.clear_key-Tuple{Data.ZarrInstance, Any}","page":"Data","title":"Data.clear_key","text":"Delete directory for a zarr group key from underlying directory store.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.combine_data-Tuple{Any, Any}","page":"Data","title":"Data.combine_data","text":"combinerows of two (OHLCV) dataframes over using :timestamp column as index.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.combinerows-Tuple{Any, Any}","page":"Data","title":"Data.combinerows","text":"(Right)Merge two dataframes on key, assuming the key is ordered and unique in both dataframes.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.contiguous_ts-Tuple{Any, AbstractString}","page":"Data","title":"Data.contiguous_ts","text":"Checks if a timeseries has any intervals not conforming to the given timeframe.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.data_td-Tuple{Any}","page":"Data","title":"Data.data_td","text":"The time interval of the dataframe, guesses from the difference between the first two rows.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.load-Tuple{Ref{Data.ZarrInstance}, Any, Any, AbstractString}","page":"Data","title":"Data.load","text":"Load a pair ohlcv data from storage. as_z: returns the ZArray\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.load_ohlcv-Tuple{Data.ZarrInstance, Any, Any, Any}","page":"Data","title":"Data.load_ohlcv","text":"Load data from given zarr instance, exchange, pairs list and timeframe.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.pair_key-Tuple{Any, Any, Any}","page":"Data","title":"Data.pair_key","text":"The full key of the data stored for the (exchange, pair, timeframe) combination.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.sanitize_pair-Tuple{AbstractString}","page":"Data","title":"Data.sanitize_pair","text":"Normalizes or special characthers separators to _.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.save_ohlcv-Tuple{Data.ZarrInstance, Any, Any, Any, Any}","page":"Data","title":"Data.save_ohlcv","text":"data_col: the timestamp column of the new data (1) saved_col: the timestamp column of the existing data (1) kind: what type of trading data it is, (ohlcv or trades) pair: the trading pair (BASE/QUOTE string) timeframe: exchange timeframe (from exc.timeframes) type: Primitive type used for storing the data (Float64)\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.to_ohlcv-Tuple{Any}","page":"Data","title":"Data.to_ohlcv","text":"Convert raw ccxt OHLCV data to a timearray/dataframe.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data.@as_mat-Tuple{Any}","page":"Data","title":"Data.@as_mat","text":"Redefines given variable to a Matrix with type of the underlying container type.\n\n\n\n\n\n","category":"macro"},{"location":"data/#Data.@as_ts-Tuple{Any, Any, Vararg{Any}}","page":"Data","title":"Data.@as_ts","text":"Converts a subset of columns to timeseries.\n\n\n\n\n\n","category":"macro"},{"location":"data/#Data.@ohlc","page":"Data","title":"Data.@ohlc","text":"Converts ohlcv dataframe to timeseries type.\n\n\n\n\n\n","category":"macro"},{"location":"data/#Data.@otime-Tuple{}","page":"Data","title":"Data.@otime","text":"Get the last date of loaded data (in mrkts variable).\n\n\n\n\n\n","category":"macro"},{"location":"data/#Data.@to_mat","page":"Data","title":"Data.@to_mat","text":"Same as as_mat but returns the new matrix.\n\n\n\n\n\n","category":"macro"},{"location":"data/#Prices","page":"Data","title":"Prices","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Modules = [Prices]","category":"page"},{"location":"data/#Main.Prices.gprofit","page":"Data","title":"Main.Prices.gprofit","text":"Total profit of a ladder of trades\n\n\n\n\n\n","category":"function"},{"location":"data/#Main.Prices.price_ranges","page":"Data","title":"Main.Prices.price_ranges","text":"Given a price, output price at given ratios. (Predefined ratios - :bal,:futures,:tight,:expa)\n\n\n\n\n\n","category":"function"},{"location":"data/#Main.Prices.price_ranges-Tuple{AbstractDict, Vararg{Any}}","page":"Data","title":"Main.Prices.price_ranges","text":"Get the price range of a map of pairs, using the last available close price.\n\n\n\n\n\n","category":"method"},{"location":"engine/engine_notes/#How-should-the-backtest-perform?","page":"-","title":"How should the backtest perform?","text":"","category":"section"},{"location":"engine/engine_notes/#Goals","page":"-","title":"Goals","text":"","category":"section"},{"location":"engine/engine_notes/","page":"-","title":"-","text":"The backtest should be able to be executed given a custom start and end date.\nThe strategy has to have access to the OHLCV and all past trade history.\nIt must be able to run during live trading.","category":"page"},{"location":"engine/engine_notes/#Main-loop","page":"-","title":"Main loop","text":"","category":"section"},{"location":"engine/engine_notes/","page":"-","title":"-","text":"for each timestamp:\nwhile true:\nprocess(strategy, timestamp, orders)\nif orders.size == 0: break\nexecute(orders)","category":"page"},{"location":"engine/engine_notes/#Notes","page":"-","title":"Notes","text":"","category":"section"},{"location":"engine/engine_notes/","page":"-","title":"-","text":"The strategy holds all the state, the engine is just a timestamp feeder.\nBecause we use the TimeFrames abstraction, the step can be arbitrary, the strategy will just index into ohlcv data according to the last candle compatible with the given timestamp.\nFor simplicity, trades happen as market orders, not limit orders.\nAlso for simplicity, orders never fail (instead we model failure as a larger loss over the holdings, i.e. sell with higher spread)\nThe engine is adversarial to the strategy, it is the job of the engine to decide how much loss a trade has incurred.","category":"page"},{"location":"engine/engine_notes/#Strategy-General-Considerations","page":"-","title":"Strategy General Considerations","text":"","category":"section"},{"location":"engine/engine_notes/","page":"-","title":"-","text":"The strategy must account for a  tie breaker to choose which trades to perform on the same candle since we don't know which pair we observed first.\nwe could make the backtest randomize the order of the universe at each step, but if the strategy applies some kind of internal sorting, it would be useless.\nThe signal itself is a value between -1 and 1, multiplied by a base amount configured in the strategy.\nWe should write ancillary functions for stop-loss and take-profit that are reusable across strategies.","category":"page"},{"location":"engine/engine_notes/#What-does-executing-an-order-mean?","page":"-","title":"What does executing an order mean?","text":"","category":"section"},{"location":"engine/engine_notes/","page":"-","title":"-","text":"When the engine executes an order, it does the following for every order:","category":"page"},{"location":"engine/engine_notes/","page":"-","title":"-","text":"Calculate the spread of the order asset based on the ohlcv data \ncheck that the balance is positive and above the minimum order size if not mark the order as failed\nChoose the open or close rate according to the signal type and open/close the order accordingly\nreturn the failed order to the strategy and repeat until the strategy gives no new orders.","category":"page"},{"location":"engine/engine/#Engine","page":"Engine","title":"Engine","text":"","category":"section"},{"location":"engine/engine/","page":"Engine","title":"Engine","text":"Backtesting is based on this assumptions","category":"page"},{"location":"engine/engine/","page":"Engine","title":"Engine","text":"Modules = [JuBot.Engine, JuBot.Engine.Instances, JuBot.Engine.Collections]","category":"page"},{"location":"engine/engine/#Engine.Context8","page":"Engine","title":"Engine.Context8","text":"The configuration against which a strategy is tested.\n\ntimeframe: The time step or \"tick\" that the backtesting iteration uses.\nspread: affects the weight of the spread calculation (based on ohlcv).\"\nslippage: affects the weight of the spread calculation (based on volume and trade size).\n\n\n\n\n\n","category":"type"},{"location":"engine/engine/#Engine.backtest!-Tuple{Any}","page":"Engine","title":"Engine.backtest!","text":"Backtest passing a context arguments as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.backtest!-Tuple{Engine.Strategies.Strategy42, Engine.Context8}","page":"Engine","title":"Engine.backtest!","text":"Backtest a strategy strat using context ctx iterating according to the specified timeframe.\n\nOn every iteration, the strategy is queried for the current timestamp. The strategy should only access data up to this point. Example:\n\nTimeframe iteration: 5s\nStrategy minimum available timeframe 1m\n\nIteration gives time 1999-12-31T23:59:59 to the strategy: The strategy (that can only lookup up to 1m precision) looks-up data until the timestamp 1999-12-31T23:58:00 which represents the time until 23:59:00. Therefore we have to shift by one period down, the timestamp returned by apply:\n\njulia> t = TimeTicks.apply(tf\"1m\", dt\"1999-12-31T23:59:59\")\n1999-12-31T23:59:00 # we should not access this timestamp\njulia> t - tf\"1m\".period\n1999-12-31T23:58:00 # this is the correct candle timestamp that we can access\n\nTo avoid this mistake, use the function available(::TimeFrame, ::DateTime), instead of apply.\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.Instances.AssetInstance26","page":"Engine","title":"Engine.Instances.AssetInstance26","text":"An asset instance holds all known state about an asset, i.e. BTC/USDT:\n\nasset: the identifier\ndata: ohlcv series\nhistory: the trade history of the pair\ncash: how much is currently held, can be positive or negative (short)\nexchange: the exchange instance that this asset instance belongs to.\nlimits: minimum order size (from exchange)\nprecision: number of decimal points (from exchange)\n\n\n\n\n\n","category":"type"},{"location":"engine/engine/#Base.fill!-Tuple{Engine.Instances.AssetInstance26, Vararg{Any}}","page":"Engine","title":"Base.fill!","text":"Pulls data from storage, or resample from the shortest timeframe available.\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.Instances.last_candle-Tuple{Engine.Instances.AssetInstance26, TimeFrames.TimeFrame, Dates.DateTime}","page":"Engine","title":"Engine.Instances.last_candle","text":"Get the last available candle strictly lower than apply(tf, date)\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.Instances.load!-Tuple{Engine.Instances.AssetInstance26}","page":"Engine","title":"Engine.Instances.load!","text":"Load ohlcv data of asset instance.\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.Collections.AssetCollection2","page":"Engine","title":"Engine.Collections.AssetCollection2","text":"A collection of assets instances, indexed by asset and exchange identifiers.\n\n\n\n\n\n","category":"type"},{"location":"engine/engine/#Base.fill!-Tuple{Engine.Collections.AssetCollection2, Vararg{Any}}","page":"Engine","title":"Base.fill!","text":"Main.Engine.Instances.fill! all the instances with given timeframes data...\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.Collections.bqe-Union{Tuple{T}, Tuple{DataFrames.DataFrame, T, T, T}} where T<:Symbol","page":"Engine","title":"Engine.Collections.bqe","text":"Dispatch based on either base, quote currency, or exchange.\n\n\n\n\n\n","category":"method"},{"location":"engine/engine/#Engine.Collections.flatten-Tuple{Engine.Collections.AssetCollection2}","page":"Engine","title":"Engine.Collections.flatten","text":"Returns a Dict{TimeFrame, DataFrame} of all the OHLCV dataframes present in the asset collection.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc","page":"Misc","title":"Misc","text":"","category":"section"},{"location":"misc/","page":"Misc","title":"Misc","text":"Modules = [JuBot.Misc]","category":"page"},{"location":"misc/#Misc.config","page":"Misc","title":"Misc.config","text":"Global configuration instance.\n\n\n\n\n\n","category":"constant"},{"location":"misc/#Misc.futures_exchange","page":"Misc","title":"Misc.futures_exchange","text":"Some exchanges are split into different classes in ccxt.\n\n\n\n\n\n","category":"constant"},{"location":"misc/#Misc.ohlcv_limits","page":"Misc","title":"Misc.ohlcv_limits","text":"Exchange ohlcv candles limits.\n\n\n\n\n\n","category":"constant"},{"location":"misc/#Misc.results","page":"Misc","title":"Misc.results","text":"Holds recently evaluated statements.\n\n\n\n\n\n","category":"constant"},{"location":"misc/#Misc.Config12","page":"Misc","title":"Misc.Config12","text":"The config main structure:\n\nwindow: The default number of candles (OHLCV).\ntimeframe: The default timeframe of the candles.\nqc: The default quote currency.\nmargin: If margin is enabled, only margin pairs are considered.\nleverage:\n:yes : leveraged pairs will not be filtered.\n:only : ONLY leveraged will not be filtered.\n:from : Selects non leveraged pairs, that also have a leveraged siblings.\nfutures: Selects the futures version of an Exchange.\nattrs: Generic metadata container.\nsources: mapping of modules symbols name to (.jl) file paths\n\n\n\n\n\n","category":"type"},{"location":"misc/#Misc._instantiate_workers-Tuple{Any}","page":"Misc","title":"Misc._instantiate_workers","text":"Instantiate new workers if the current number mismatches the requested one.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc.config_path-Tuple{}","page":"Misc","title":"Misc.config_path","text":"The config path (TOML), relative to the current project directory.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc.empty_ohlcv-Tuple{}","page":"Misc","title":"Misc.empty_ohlcv","text":"An empty OHLCV dataframe.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc.loadconfig!-Tuple{T} where T<:Union{String, Symbol}","page":"Misc","title":"Misc.loadconfig!","text":"Parses the toml file and populates the global config.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc.resetconfig!-Tuple{}","page":"Misc","title":"Misc.resetconfig!","text":"Reset global config to default values.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc.setcfg!-Tuple{Any, Any}","page":"Misc","title":"Misc.setcfg!","text":"Sets a single config value.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Misc.@as_dfdict","page":"Misc","title":"Misc.@as_dfdict","text":"Binds a mrkts variable to a Dict{String, DataFrame} where the keys are the pairs names and the data is the OHLCV data of the pair.\n\n\n\n\n\n","category":"macro"},{"location":"misc/#Misc.@lev!-Tuple{}","page":"Misc","title":"Misc.@lev!","text":"Toggle config leverage flag\n\n\n\n\n\n","category":"macro"},{"location":"misc/#Misc.@margin!-Tuple{}","page":"Misc","title":"Misc.@margin!","text":"Toggle config margin flag.\n\n\n\n\n\n","category":"macro"},{"location":"misc/#Progress-bar","page":"Misc","title":"Progress bar","text":"","category":"section"},{"location":"misc/","page":"Misc","title":"Misc","text":"Modules = [Pbar]","category":"page"},{"location":"misc/#Pbar.Pbar","page":"Misc","title":"Pbar.Pbar","text":"Python enlighten progressbar wrapper.\n\n\n\n\n\n","category":"module"},{"location":"misc/#Pbar.pbclose-Tuple{Any}","page":"Misc","title":"Pbar.pbclose","text":"Terminates the progress bar.\n\n\n\n\n\n","category":"method"},{"location":"misc/#Pbar.@pbar!","page":"Misc","title":"Pbar.@pbar!","text":"Instantiate a progress bar:\n\ndata: length(data) determines the bar total\nunit: what unit the display\ndesc: description will appear over the progressbar\n\n\n\n\n\n","category":"macro"},{"location":"misc/#Pbar.@pbupdate!","page":"Misc","title":"Pbar.@pbupdate!","text":"Single update to the progressbar with the new value.\n\n\n\n\n\n","category":"macro"},{"location":"analysis/#Analysis","page":"Analysis","title":"Analysis","text":"","category":"section"},{"location":"analysis/","page":"Analysis","title":"Analysis","text":"This module is pretty much a playground of functions that I am using/used, most likely of very little interest.","category":"page"},{"location":"analysis/","page":"Analysis","title":"Analysis","text":"Modules = [Analysis]","category":"page"},{"location":"analysis/#Analysis.corsp-Tuple{AbstractArray, AbstractArray}","page":"Analysis","title":"Analysis.corsp","text":"Compute spearman correlation between x and y, where y is shifted forward (lead).\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.find_bottomed-Tuple{AbstractVector{Data.PairData}}","page":"Analysis","title":"Analysis.find_bottomed","text":"Find bottomed longs.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.find_peaked-Tuple{AbstractVector{Data.PairData}}","page":"Analysis","title":"Analysis.find_peaked","text":"Find peaked shorts.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.fltsummary-Tuple{AbstractVector{Tuple{AbstractFloat, Data.PairData}}}","page":"Analysis","title":"Analysis.fltsummary","text":"Return the summary of a filtered vector of pairdata.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.isrenkoentry-Tuple{DataFrames.AbstractDataFrame}","page":"Analysis","title":"Analysis.isrenkoentry","text":"A good renko entry is determined by X candles of the opposite color after Y candles.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.mark!-Tuple{}","page":"Analysis","title":"Analysis.mark!","text":"Loads the Mark module.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.supres-Tuple{Any}","page":"Analysis","title":"Analysis.supres","text":"This support and resistance functions from Indicators appear to be too inaccurate despite parametrization.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Analysis.up_successrate-Tuple{Any, Union{String, Symbol}}","page":"Analysis","title":"Analysis.up_successrate","text":"Calculate successrate of given column against next candle. direction: true is buy, false is sell.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Base.filter-Tuple{Function, AbstractDict, Real, Real}","page":"Analysis","title":"Base.filter","text":"Filters a list of pairs using a predicate function. The predicate functions must return a Real number which will be used for sorting.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Mark","page":"Analysis","title":"Mark","text":"","category":"section"},{"location":"analysis/#MVP","page":"Analysis","title":"MVP","text":"","category":"section"},{"location":"analysis/","page":"Analysis","title":"Analysis","text":"Modules = [MVP]","category":"page"},{"location":"analysis/#MVP.MVP","page":"Analysis","title":"MVP.MVP","text":"Momentum, volume, price indicator.\n\n\n\n\n\n","category":"module"},{"location":"analysis/#MVP.discrete_mvp-Tuple{AbstractDict{String, Data.PairData}}","page":"Analysis","title":"MVP.discrete_mvp","text":"\n\n\n\n","category":"method"},{"location":"analysis/#MVP.is_mvp-Tuple{AbstractVector, AbstractVector}","page":"Analysis","title":"MVP.is_mvp","text":"Returns the mvp-ness of a pair as a sum of each condition ratio weighted by weights. If real=false it will return a Bool indicating if the pair passes the given ratios.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#MVP.momentum-Tuple{AbstractVector}","page":"Analysis","title":"MVP.momentum","text":"Ratio is the minimum number of green candles required.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#MVP.volume-Tuple{AbstractVector}","page":"Analysis","title":"MVP.volume","text":"Ratio is the minimum percent increment of volume from the first half of the series.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short","page":"Analysis","title":"Short","text":"","category":"section"},{"location":"analysis/","page":"Analysis","title":"Analysis","text":"Modules = [Short]","category":"page"},{"location":"analysis/#Short.Short","page":"Analysis","title":"Short.Short","text":"Predicates that signal lowered chances of success.\n\n\n\n\n\n","category":"module"},{"location":"analysis/#Short.find-Tuple{AbstractDict}","page":"Analysis","title":"Short.find","text":"A good short should have high volume, (too) high price change, and dominating red candles.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short.fullret-Tuple{Any, Any, Any}","page":"Analysis","title":"Short.fullret","text":"Has a full retracement occurred?\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short.isbelow20-Tuple{Any, Any}","page":"Analysis","title":"Short.isbelow20","text":"Is the close below the Average?\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short.isbelow50-NTuple{4, Any}","page":"Analysis","title":"Short.isbelow50","text":"Is the close below the average with volume above average? Intended to be used on longer windows in contrast to the volume-less version. \n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short.isdcandles-Tuple{Any, Any}","page":"Analysis","title":"Short.isdcandles","text":"Are down candles more than up candles?\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short.lowhin-NTuple{4, AbstractVector}","page":"Analysis","title":"Short.lowhin","text":"True if series experienced a recent breakout with high volume retracement (Low out, High in). If breakout is not met, returns nothing. br: Breakout rule. window: How far backward to look for breakouts. delay: Delay to look for retracements.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Short.mustd-Tuple{AbstractVector, Vararg{Any}}","page":"Analysis","title":"Short.mustd","text":"Breakout level. Mean with std.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long","page":"Analysis","title":"Long","text":"","category":"section"},{"location":"analysis/","page":"Analysis","title":"Analysis","text":"Modules = [Long]","category":"page"},{"location":"analysis/#Long.Long","page":"Analysis","title":"Long.Long","text":"Predicates that signal increased chances of success.\n\n\n\n\n\n","category":"module"},{"location":"analysis/#Long.rs_cache","page":"Analysis","title":"Long.rs_cache","text":"Since relative strength computes the score for the whole set, it is useful to cache it when querying elements from the same set.\n\n\n\n\n\n","category":"constant"},{"location":"analysis/#Long.fthrough-Tuple{Any, Any, Any}","page":"Analysis","title":"Long.fthrough","text":"Follow through price action.\n\nmin_follow: Minimum number of upward candles that have to follow after breakout.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.istennisball-Tuple{Any}","page":"Analysis","title":"Long.istennisball","text":"Tennis ball action, resilient price snapback after a pullback.\n\nsnapback: The number of candles to consider for snapback action. \n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.long-Tuple{AbstractDict}","page":"Analysis","title":"Long.long","text":"Evaluate traits for a collection of pairs.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.long-Tuple{Any, Vector{String}}","page":"Analysis","title":"Long.long","text":"Evaluate traits on multiple timeframes.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.long-Tuple{DataFrames.AbstractDataFrame}","page":"Analysis","title":"Long.long","text":"Evaluate trais for a single pair.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.pair_matrix-Tuple{AbstractDict}","page":"Analysis","title":"Long.pair_matrix","text":"Given a dict of dataframes (ohlcv) returns a tuple of matrices, where high and volume are respectively concatenated.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.relative_strength-Tuple{AbstractString, AbstractDict}","page":"Analysis","title":"Long.relative_strength","text":"Computes the relative strength of a collection (dict) of pairs. Returning the queried one, and the rest.\n\nsorted: Sort the matrix of all relative strengths.\nnorm_roc: Smooths the ranking by normalizing the rate of change at each candle.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.relative_strength-Tuple{Matrix, Matrix}","page":"Analysis","title":"Long.relative_strength","text":"Given a collection of price timeseries (1D), calculate the relative strength of each series as the summation of the rate of change at each timestep t.\n\n\n\n\n\n","category":"method"},{"location":"analysis/#Long.stage2-Tuple{AbstractString, AbstractVector, AbstractVector, AbstractVector, AbstractDict}","page":"Analysis","title":"Long.stage2","text":"Stage 2 template.\n\nbase° is the maximum angle allowed for a pattern to be considered a base (above which would be uptrending).\nbaseσ is the window considered at the last step, for regressing the base formation.\n\n\n\n\n\n","category":"method"},{"location":"strategy/#Strategy-interface","page":"Strategy interface","title":"Strategy interface","text":"","category":"section"},{"location":"strategy/#Load-a-strategy","page":"Strategy interface","title":"Load a strategy","text":"","category":"section"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"The strategy is instantiated by loading a julia module at runtime.","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"using JuBot\ncfg = loadconfig!(:kucoin, cfg=Config()) # Load the configuration, choosing kucoin as exchange\nloadstrategy!(:Macd, cfg) # Load the Macd strategy","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"The strategy is looked up inside the config under the sources key:","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"# Example config\n[kucoin]\nfutures = true\n[sources]\nMacd = \"cfg/strategies/Macd.jl\" # the name of the module","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"The key is the name of the module (in this case Macd) which will be imported from the included file \"cfg/strategies/Macd.jl\".","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"After the strategy module is imported the strategy is instantiated according to the module name (the strategy type is parametric).","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"s = Strategy(name)","category":"page"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"> typeof(s)\nEngine.Strategies.Strategy37{:Macd, ExchangeTypes.ExchangeID{:kucoin}(), :USDT}","category":"page"},{"location":"strategy/#Familiarize-with-the-data-structures","page":"Strategy interface","title":"Familiarize with the data structures","text":"","category":"section"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"Strategy","category":"page"},{"location":"strategy/#Engine.Strategies.Strategy","page":"Strategy interface","title":"Engine.Strategies.Strategy","text":"The strategy is the core type of the framework.\n\nThe strategy type is concrete according to:\n\nName (Symbol)\nExchange (ExchangeID), read from config\nQuote cash (Symbol), read from config\n\nThe exchange and the quote cash should be specified from the config, or the strategy module.\n\nuniverse: All the assets that the strategy knows about\nbalances: assets with open orders or non zero balance.\norders: all active orders\ncash: the quote currency used for trades\n\n\n\n\n\n","category":"type"},{"location":"strategy/","page":"Strategy interface","title":"Strategy interface","text":"Modules = [Strategies]\nFilter = filter_strategy","category":"page"},{"location":"strategy/#Engine.Strategies.clearorders!-Tuple{Engine.Strategies.Strategy42}","page":"Strategy interface","title":"Engine.Strategies.clearorders!","text":"Clears all orders history from strategy.\n\n\n\n\n\n","category":"method"},{"location":"strategy/#Engine.Strategies.reload!-Tuple{Engine.Strategies.Strategy42}","page":"Strategy interface","title":"Engine.Strategies.reload!","text":"Reloads ohlcv data for assets already present in the strategy universe.\n\n\n\n\n\n","category":"method"},{"location":"plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Plotting module is based on (py)echarts.","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Modules = [Plotting]","category":"page"},{"location":"plotting/#Plotting._plotone-Tuple{Data.PairData}","page":"Plotting","title":"Plotting._plotone","text":"OHLCV plot with bbands and alma indicators.\n\n\n\n\n\n","category":"method"},{"location":"plotting/#Plotting.countdf-Tuple{DataFrames.AbstractDataFrame}","page":"Plotting","title":"Plotting.countdf","text":"Bincount dataframe\n\n\n\n\n\n","category":"method"},{"location":"plotting/#Plotting.heatmap","page":"Plotting","title":"Plotting.heatmap","text":"Heatmap of between two series.\n\n\n\n\n\n","category":"function"},{"location":"plotting/#Plotting.init_pyecharts","page":"Plotting","title":"Plotting.init_pyecharts","text":"Loads pyecharts python module.\n\n\n\n\n\n","category":"function"},{"location":"plotting/#Plotting.plotgrid","page":"Plotting","title":"Plotting.plotgrid","text":"Plots ohlcv data overlaying indicators inds and inds2.\n\n\n\n\n\n","category":"function"},{"location":"plotting/#Plotting.plotscatter3d-Tuple{Any}","page":"Plotting","title":"Plotting.plotscatter3d","text":"Scatter plot only the end of a dataframe given from tail.\n\n\n\n\n\n","category":"method"},{"location":"plotting/#Plotting.@chart-Tuple{Any, Vararg{Any}}","page":"Plotting","title":"Plotting.@chart","text":"Initializes pyechart chart class.\n\n\n\n\n\n","category":"macro"},{"location":"plotting/#Plotting.@df_dates_data-Tuple{}","page":"Plotting","title":"Plotting.@df_dates_data","text":"Set dates and ohlc data from dataframe columns.\n\n\n\n\n\n","category":"macro"},{"location":"#JuBot-docs","page":"JuBot docs","title":"JuBot docs","text":"","category":"section"},{"location":"","page":"JuBot docs","title":"JuBot docs","text":"This backtest framework is comprised of different modules:","category":"page"},{"location":"","page":"JuBot docs","title":"JuBot docs","text":"Engine: The actual backtest engine (to be built).\nStrategies: Types and concept for building strategies.\nExchanges: Loads exchanges instances, markets and pairlists, based on [ccxt].\nData: Loading and saving ohlcv data (and more), based Zarr.\nProcessing: Data cleanup, normalization, resampling functions.\nMisc: Ancillary stuff, like configuration, and some UI bits.\nPlotting: Output plots for ohlcv data and indicators, based on pyecharts.\nAnalysis: The bulk of indicators evaluation, depends of a bunch of (heavy) julia libraries like CausalityTools and Indicators.","category":"page"},{"location":"","page":"JuBot docs","title":"JuBot docs","text":"[ccxt]: https://docs.ccxt.com/en/latest/manual.html","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Learning the types is all that's required to start backtesting or live trading.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [Instruments, Derivatives]\nOrder = [:type]","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [Instruments, Derivatives]\nOrder = [:function]","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [Instruments, Derivatives]\nOrder = [:macro, :constant]","category":"page"}]
}
